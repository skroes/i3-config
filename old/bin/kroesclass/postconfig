#!/bin/bash
#for i in `seq 11 17`; do echo $i; echo ./postconfig -n kroescontrol${i}; done

set -e

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -n|--name) INSTANCENAME="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

echo
echo
echo "POSTCONFIG $INSTANCENAME"
echo
echo


set -x

instance=$INSTANCENAME

fqdn="${instance}.westeurope.cloudapp.azure.com"
sleep 2
ip=$(dig +search +short $fqdn)
sleep 2
ssh-keygen -R $fqdn
ssh-keygen -R $ip
ssh-keyscan -H $ip >> ~/.ssh/known_hosts
ssh-keyscan -H $fqdn >> ~/.ssh/known_hosts
sync
sleep 2

HOST=$INSTANCENAME


# root staging files
ssh -i kroescontrol -o "StrictHostKeyChecking no" kroescontrol@${HOST}.westeurope.cloudapp.azure.com mkdir stagingroot
scp -i kroescontrol -o "StrictHostKeyChecking no" -r stagingroot/* kroescontrol@${HOST}.westeurope.cloudapp.azure.com:stagingroot/
# user staging files
scp -i kroescontrol -o "StrictHostKeyChecking no" -r staging/*     kroescontrol@${HOST}.westeurope.cloudapp.azure.com:

ssh -i kroescontrol -o "StrictHostKeyChecking no" kroescontrol@${HOST}.westeurope.cloudapp.azure.com << EOF
sudo su -
echo "SuperSecret" | passwd --stdin kroescontrol
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
systemctl restart sshd
systemctl restart firewalld
systemctl enable firewalld

# initial

cp -rv /home/kroescontrol/stagingroot/* /
rm -Rf /home/kroescontrol/stagingroot/

yum update -y
yum install epel-release -y
yum install wget curl git httpd golang -y

rm /etc/httpd/conf.d/welcome.conf
systemctl enable --now httpd
firewall-cmd --add-service=http --permanent

sed -i "s/SHORTHOSTNAME/${HOST}/g" /var/www/html/index.html
sudo restorecon -v /var/www/html/index.html

curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo
yum makecache

yum install docker-ce -y
#RHEL8 yum install docker-ce --nobest -y

systemctl enable --now docker
sudo usermod -aG docker kroescontrol

#RHEL8 rm /etc/yum.repos.d/docker-ce.repo
#RHEL8 yum makecache

# cockpit runs on port 9999
yum install cockpit -y
sudo semanage port -a -t websm_port_t -p tcp 9999 || true
sudo semanage port -m -t websm_port_t -p tcp 9999
sudo firewall-cmd --add-port=9999/tcp --permanent
sudo systemctl daemon-reload
sudo systemctl enable --now cockpit.socket

echo DOCKER-COMPOSE
sleep 3

curl -s https://api.github.com/repos/docker/compose/releases/latest \
  | grep browser_download_url \
  | grep docker-compose-Linux-x86_64 \
  | cut -d '"' -f 4 \
  | wget -qi -

sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo curl -L https://raw.githubusercontent.com/docker/compose/master/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose
source /etc/bash_completion.d/docker-compose

#docker pull redis
#docker pull portainer/portainer
#docker pull quay.io/vektorlab/ctop:latest
#docker pull gcr.io/google-containers/cadvisor
#docker pull prom/prometheus

sudo firewall-cmd --add-port=8080/tcp --permanent
sudo firewall-cmd --add-port=3000/tcp --permanent
sudo firewall-cmd --add-port=9090/tcp --permanent

sudo firewall-cmd --add-port=20101/tcp --permanent
sudo firewall-cmd --add-port=20102/tcp --permanent
sudo firewall-cmd --add-port=20103/tcp --permanent

sudo firewall-cmd --add-port=9121/tcp --permanent

sudo firewall-cmd --reload

EOF



ssh -i kroescontrol kroescontrol@${HOST}.westeurope.cloudapp.azure.com << EOF
[ ! -d grafana-tutorial-environment/.git ] && rm -Rf grafana-tutorial-environment
git clone https://github.com/grafana/tutorial-environment.git grafana-tutorial-environment || true
cd grafana-tutorial-environment
git pull
cd ~
#docker-compose up -d



rm -Rf ~/myredis

#myredis
#set -x
#docker run -d -p 6379:6379 --name myredis redis || docker start myredis
#docker run --name redis-commander -d \
#  --env REDIS_HOSTS=10.10.20.30 \
#  -p 8082:8081 \
#  rediscommander/redis-commander:latest  || docker start redis-commander


# REDIS APP


#rm -Rf ~/retwis-go
#git clone https://github.com/gsempe/retwis-go || true

#cd ~/retwis-go
#go get github.com/gsempe/retwis-go
#go build
#rm -Rf ~/go

#nohup retwis-start </dev/null &>/dev/null &

EOF
